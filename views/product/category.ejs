<!DOCTYPE html>
<html lang="en">

<head>

    <meta charset="utf-8" />
    <title>Product Category</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta content="A fully featured admin theme which can be used to build CRM, CMS, etc." name="description" />
    <meta content="Coderthemes" name="author" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <!-- App css -->

    <link href="/assets/css/app.min.css" rel="stylesheet" type="text/css" id="app-style" />

    <!-- icons -->
    <link href="/assets/css/icons.min.css" rel="stylesheet" type="text/css" />

    <!-- App favicon -->
    <link rel="shortcut icon" href="/assets/images/favicon.ico">

    <!-- Plugins css -->
    <link href="/assets/libs/mohithg-switchery/switchery.min.css" rel="stylesheet" type="text/css" />
    <link href="/assets/libs/multiselect/css/multi-select.css" rel="stylesheet" type="text/css" />
    <link href="/assets/libs/select2/css/select2.min.css" rel="stylesheet" type="text/css" />
    <link href="/assets/libs/selectize/css/selectize.bootstrap3.css" rel="stylesheet" type="text/css" />
    <link href="/assets/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.css" rel="stylesheet" type="text/css" />




    <!-- App css -->

    <link href="/assets/css/app.min.css" rel="stylesheet" type="text/css" id="app-style" />

    <!-- icons -->
    <link href="/assets/css/icons.min.css" rel="stylesheet" type="text/css" />

    <!-- data tables css -->
    <link href="https://cdn.datatables.net/1.13.7/css/jquery.dataTables.min.css" rel="stylesheet" type="text/css" />
    <link href="https://cdn.datatables.net/buttons/2.4.2/css/buttons.dataTables.min.css" rel="stylesheet" type="text/css" />

    <link rel="stylesheet" href="https://cdn.datatables.net/select/1.3.3/css/select.dataTables.min.css">


</head>

<!-- body start -->

<body class="loading" data-layout-color="light" data-layout-mode="default" data-layout-size="fluid" data-topbar-color="light" data-leftbar-position="fixed" data-leftbar-color="light" data-leftbar-size='default' data-sidebar-user='true'>

    <!-- Begin page -->
    <div id="wrapper">

        <!-- Top bar Start -->
        <%- include('../layouts/topbar.ejs') -%>

            <!-- end Topbar -->

            <!-- Left Sidebar Start ========== -->
            <%- include('../layouts/left_sidebar.ejs') -%>

                <!-- Left Sidebar End -->


                <!-- Start Page Content here -->
                <div class="content-page mt-5" style="background: #F9F9F9;">

                    <div class="content">


                        <div class="bg-white p-3 mb-2" style="border-radius: 5px;">
                            <h4 class="text-black font-bold mb-3">Category</h4>
                            <div style="color: rgb(97 97 97); margin-right: 0.5rem">
                                <span>Product</span>
                                <span>></span>
                                <span>Category</span>
                            </div>
                        </div>

                        <!-- Start Content-->
                        <div class="container-fluid card p-4" style="padding: 20px;">

                            <div class="d-flex justify-content-between">
                                <div class="mb-3">
                                    <h3 class="mb-0">Products Category</h3>
                                </div>

                                <div data-bs-toggle="modal" data-bs-target="#category" class="">
                                    <span style="background:black; color:white; border:1px solid grey;border-radius: 0px; padding: 10px 15px;">
                                        <!-- <svg class="white-svg" xmlns="http://www.w3.org/2000/svg" height="16" width="16" viewBox="0 0 512 512">
                                            <path d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32V224H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H192V432c0 17.7 14.3 32 32 32s32-14.3 32-32V288H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z" />
                                        </svg> -->
                                        <i class="fas fa-plus"></i>
                                        Add Category
                                    </span>
                                </div>

                            </div>

                            <!-- Modal -->
                            <div class="modal fade" id="category" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h1 class="modal-title fs-5" id="exampleModalLabel">Add Category</h1>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <form method="post" action="/product/post_category" enctype="multipart/form-data">
                                            <div class="modal-body">
                                                <div class="row">

                                                    <div class="col-12 col-md-6 col-lg-6 col-xl-6 mb-2">
                                                        <div class="main-img-container mt-2">
                                                            <img class="" src="https://images.unsplash.com/photo-1517694712202-14dd9538aa97?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" alt="Not Available"
                                                                style="width:130px;border-radius:5px;" id="main-img-preview1">
                                                            <br>
                                                            <label for="mainImg1" class="btn btn-dark mt-2">Category Image</label>
                                                            <input type="file" class="d-none" id="mainImg1" onchange="main_image_changed1(this,Null)" name="category_image">
                                                        </div>
                                                    </div>
                                                    <div class="col-12 col-md-6 col-lg-6 col-xl-6 mb-2">
                                                        <div class="form-group" style="background-color: white; border-radius: 5px; padding:10px">
                                                            <label>UPC code</label>
                                                            <input readonly type="text" class="form-control" value="<%=upc_code%>" name="upc_code" onkeypress="return event.keyCode != 13;">
                                                        </div>
                                                    </div>

                                                    <script>

                                                        let count = 0;
                                                        //image category
                                                        const main_image_changed1 = (tag, ind) => {
                                                            let imgTag;
                                                            if (ind) {
                                                                imgTag = document.getElementById(`main-img-preview1_${ind}`);
                                                            } else {
                                                                imgTag = document.getElementById(`main-img-preview1`);
                                                            }
                                                            // imgTag.classList.remove("d-none");
                                                            if (tag.files && tag.files[0]) {
                                                                var reader = new FileReader();
                                                                reader.onload = function (e) {
                                                                    imgTag.setAttribute("src", e.target.result);
                                                                };
                                                                reader.readAsDataURL(tag.files[0]);
                                                            }

                                                        };

                                                    </script>

                                                    <!-- previous code -->
                                                    <!-- <div class="col-12 col-md-6 col-lg-6 col-xl-6 mb-2">
                                                        <div class="form-group" style="background-color: white; border-radius: 5px; padding:10px">
                                                            <label>Parent Category</label>
                                                            <input type="text" class="form-control" value="" name="category_name" onkeypress="return event.keyCode != 13;">
                                                        </div>
                                                    </div> -->

                                                    <!-- start -->
                                                    <style>
                                                        .wrapper1 {
                                                            margin: 1em auto;
                                                            text-align: left;
                                                        }

                                                        .sample {
                                                            /* border: 1px solid #eeeeee; */
                                                            background: #ffffff;
                                                            max-width: 30em;
                                                            /* padding: 1em; */
                                                            margin-bottom: 1em;
                                                        }

                                                        .custom-select {
                                                            position: relative;
                                                        }

                                                        .select-css {
                                                            text-align: left;

                                                            display: block;
                                                            font-size: 1em;
                                                            font-family: sans-serif;
                                                            font-weight: 700;
                                                            color: #444;
                                                            line-height: 1.3;
                                                            padding: 0.6em 1.4em 0.5em 0.8em;
                                                            width: 100%;
                                                            max-width: 100%;
                                                            box-sizing: border-box;
                                                            margin: 0;
                                                            border: 1px solid #aaa;
                                                            box-shadow: 0 1px 0 1px rgba(0, 0, 0, 0.04);
                                                            border-radius: 0.25em;
                                                            -moz-appearance: none;
                                                            -webkit-appearance: none;
                                                            appearance: none;
                                                            background-color: #fff;
                                                            position: relative;
                                                            z-index: 10;
                                                        }

                                                        .select-css::-ms-expand {
                                                            display: none;
                                                        }

                                                        .select-css:hover {
                                                            border-color: #888;
                                                        }

                                                        .select-css:focus {
                                                            border: 1px dashed blue;
                                                            color: #222;
                                                            outline: none;
                                                        }

                                                        .custom-select-icons {
                                                            position: absolute;
                                                            top: 0.5em;
                                                            right: 0.5em;
                                                            z-index: 20;
                                                            border: 1px solid white;
                                                            background: transparent;
                                                        }

                                                        .custom-select-options {
                                                            border: 1px solid #aaa;
                                                            border-radius: 0 0 0.25em 0.25em;
                                                            line-height: 1.5;
                                                            margin: 0;
                                                            margin-top: -0.5em;
                                                            padding: 0;
                                                            list-style-type: none;
                                                            font-weight: normal;
                                                            cursor: pointer;
                                                            z-index: 2;
                                                            position: absolute;
                                                            width: calc(100% - 1px);
                                                            background-color: #ffffff;
                                                        }

                                                        .custom-select-options li {
                                                            padding: 5px;
                                                        }

                                                        .custom-select-options li:hover {
                                                            background: blue;
                                                            color: #fff;
                                                            border: 1px solid blue;
                                                            border-width: 0 0 0 1px;
                                                        }

                                                        .custom-select-options li:focus {
                                                            border: 1px solid blue;
                                                        }

                                                        .icon {
                                                            fill: ButtonText;
                                                            pointer-events: none;
                                                        }

                                                        @media screen and (-ms-high-contrast: active) {
                                                            .icon {
                                                                fill: ButtonText;
                                                            }
                                                        }

                                                        .hidden-all {
                                                            display: none;
                                                        }

                                                        .hidden-visually {
                                                            position: absolute;
                                                            width: 1px;
                                                            height: 1px;
                                                            padding: 0;
                                                            overflow: hidden;
                                                            clip: rect(0, 0, 0, 0);
                                                            white-space: nowrap;
                                                            -webkit-clip-path: inset(50%);
                                                            clip-path: inset(50%);
                                                            border: 0;
                                                        }
                                                    </style>

                                                    <div class="ms-2 col-12 col-md-12 col-lg-12 col-xl-12 mb-1 wrapper1">

                                                        <div class="sample">
                                                            <label for="custom-select-input">Parent Category</label>

                                                            <div id='custom-select-status' class='hidden-visually' aria-live="polite"></div>
                                                            <div class="custom-select" id="myCustomSelect">
                                                                <!-- <input type="text" id="custom-select-input" class="select-css" name="category_name" value=""> -->
                                                                <input type="text" id="custom-select-input" class="select-css" name="parent_category" value="" aria-autocomplete="both" aria-controls="custom-select-list" value="">

                                                                <span class="custom-select-icons">
                                                                    <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="16" height="16" viewBox="0 0 16 16" focusable="false" aria-hidden="true" id="icon-circle-down" class="icon" role="img">
                                                                        <path d="M16 8c0-4.418-3.582-8-8-8s-8 3.582-8 8 3.582 8 8 8 8-3.582 8-8zM1.5 8c0-3.59 2.91-6.5 6.5-6.5s6.5 2.91 6.5 6.5-2.91 6.5-6.5 6.5-6.5-2.91-6.5-6.5z"></path>
                                                                        <path d="M4.957 5.543l-1.414 1.414 4.457 4.457 4.457-4.457-1.414-1.414-3.043 3.043z" fill="blue"></path>
                                                                    </svg>
                                                                    <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="16" height="16" viewBox="0 0 16 16" focusable="false" aria-hidden="true" id="icon-circle-up" class="icon hidden-all" role="img">
                                                                        <path d="M0 8c0 4.418 3.582 8 8 8s8-3.582 8-8-3.582-8-8-8-8 3.582-8 8zM14.5 8c0 3.59-2.91 6.5-6.5 6.5s-6.5-2.91-6.5-6.5 2.91-6.5 6.5-6.5 6.5 2.91 6.5 6.5z"></path>
                                                                        <path d="M11.043 10.457l1.414-1.414-4.457-4.457-4.457 4.457 1.414 1.414 3.043-3.043z" fill="blue"></path>
                                                                    </svg>
                                                                </span>

                                                                <ul class="custom-select-options hidden-all" id="custom-select-list">
                                                                    <% record.forEach(all=> { %>
                                                                        <li><strong>
                                                                                <%= all.parent_category %>
                                                                            </strong></li>
                                                                        <% }); %>
                                                                </ul>
                                                            </div>
                                                        </div>

                                                    </div>

                                                    <script>
                                                        // SETUP
                                                        // assign names to things we'll need to use more than once
                                                        const csSelector = document.querySelector('#myCustomSelect') // the input, svg and ul as a group
                                                        const csInput = csSelector.querySelector('input')
                                                        const csList = csSelector.querySelector('ul')
                                                        const csOptions = csList.querySelectorAll('li')
                                                        const csIcons = csSelector.querySelectorAll('svg')
                                                        const csStatus = document.querySelector('#custom-select-status')
                                                        const aOptions = Array.from(csOptions)

                                                        // when JS is loaded, set up our starting point
                                                        // if JS fails to load, the custom select remains a plain text input
                                                        // create and set start point for the state tracker
                                                        let csState = "initial"
                                                        // inform assistive tech (screen readers) of the names & roles of the elements in our group
                                                        csSelector.setAttribute('role', 'combobox')
                                                        csSelector.setAttribute('aria-haspopup', 'listbox')
                                                        csSelector.setAttribute('aria-owns', 'custom-select-list') // container owns the list...
                                                        csInput.setAttribute('aria-autocomplete', 'both')
                                                        csInput.setAttribute('aria-controls', 'custom-select-list') // ...but the input controls it
                                                        csList.setAttribute('role', 'listbox')
                                                        csOptions.forEach(function (option) {
                                                            option.setAttribute('role', 'option')
                                                            option.setAttribute('tabindex', "-1")  // make li elements keyboard focusable by script only
                                                        })
                                                        // set up a message to keep screen reader users informed of what the custom input is for/doing
                                                        csStatus.textContent = csOptions.length + " options available. Arrow down to browse or start typing to filter."

                                                        // EVENTS
                                                        csSelector.addEventListener('click', function (e) {
                                                            const currentFocus = findFocus();
                                                            const clickedElement = e.target;

                                                            if (clickedElement.tagName === 'LI') {
                                                                makeChoice(clickedElement);
                                                                toggleList('Shut');
                                                                setState('closed');
                                                            } else {
                                                                switch (csState) {
                                                                    case 'initial':
                                                                        toggleList('Open');
                                                                        setState('opened');
                                                                        break;
                                                                    case 'opened':
                                                                        if (currentFocus === csInput) {
                                                                            toggleList('Shut');
                                                                            setState('initial');
                                                                        } else if (currentFocus.tagName === 'LI') {
                                                                            makeChoice(currentFocus);
                                                                            toggleList('Shut');
                                                                            setState('closed');
                                                                        }
                                                                        break;
                                                                    case 'filtered':
                                                                        if (currentFocus.tagName === 'LI') {
                                                                            makeChoice(currentFocus);
                                                                            toggleList('Shut');
                                                                            setState('closed');
                                                                        }
                                                                        break;
                                                                    case 'closed':
                                                                        toggleList('Open');
                                                                        setState('filtered');
                                                                        break;
                                                                }
                                                            }
                                                        });
                                                        csSelector.addEventListener('keyup', function (e) {
                                                            doKeyAction(e.key)
                                                        })

                                                        document.addEventListener('click', function (e) {
                                                            if (!e.target.closest('#myCustomSelect')) {
                                                                // click outside of the custom group
                                                                toggleList('Shut')
                                                                setState('initial')
                                                            }
                                                        })

                                                        // FUNCTIONS 
                                                        function toggleList(whichWay) {
                                                            if (whichWay === 'Open') {
                                                                csList.classList.remove('hidden-all')
                                                                csSelector.setAttribute('aria-expanded', 'true')
                                                            } else { // === 'Shut'
                                                                csList.classList.add('hidden-all')
                                                                csSelector.setAttribute('aria-expanded', 'false')
                                                            }
                                                        }

                                                        function findFocus() {
                                                            const focusPoint = document.activeElement
                                                            return focusPoint
                                                        }

                                                        function moveFocus(fromHere, toThere) {
                                                            // grab the currently showing options, which might have been filtered
                                                            const aCurrentOptions = aOptions.filter(function (option) {
                                                                if (option.style.display === '') {
                                                                    return true
                                                                }
                                                            })
                                                            // don't move if all options have been filtered out
                                                            if (aCurrentOptions.length === 0) {
                                                                return
                                                            }
                                                            if (toThere === 'input') {
                                                                csInput.focus()
                                                            }
                                                            // possible start points
                                                            switch (fromHere) {
                                                                case csInput:
                                                                    if (toThere === 'forward') {
                                                                        aCurrentOptions[0].focus()
                                                                    } else if (toThere === 'back') {
                                                                        aCurrentOptions[aCurrentOptions.length - 1].focus()
                                                                    }
                                                                    break
                                                                case csOptions[0]:
                                                                    if (toThere === 'forward') {
                                                                        aCurrentOptions[1].focus()
                                                                    } else if (toThere === 'back') {
                                                                        csInput.focus()
                                                                    }
                                                                    break
                                                                case csOptions[csOptions.length - 1]:
                                                                    if (toThere === 'forward') {
                                                                        aCurrentOptions[0].focus()
                                                                    } else if (toThere === 'back') {
                                                                        aCurrentOptions[aCurrentOptions.length - 2].focus()
                                                                    }
                                                                    break
                                                                default: // middle list or filtered items 
                                                                    const currentItem = findFocus()
                                                                    const whichOne = aCurrentOptions.indexOf(currentItem)
                                                                    if (toThere === 'forward') {
                                                                        const nextOne = aCurrentOptions[whichOne + 1]
                                                                        nextOne.focus()
                                                                    } else if (toThere === 'back' && whichOne > 0) {
                                                                        const previousOne = aCurrentOptions[whichOne - 1]
                                                                        previousOne.focus()
                                                                    } else { // if whichOne = 0
                                                                        csInput.focus()
                                                                    }
                                                                    break
                                                            }
                                                        }

                                                        function doFilter() {
                                                            const terms = csInput.value
                                                            const aFilteredOptions = aOptions.filter(function (option) {
                                                                if (option.innerText.toUpperCase().startsWith(terms.toUpperCase())) {
                                                                    return true
                                                                }
                                                            })
                                                            csOptions.forEach(option => option.style.display = "none")
                                                            aFilteredOptions.forEach(function (option) {
                                                                option.style.display = ""
                                                            })
                                                            setState('filtered')
                                                            updateStatus(aFilteredOptions.length)
                                                        }

                                                        function updateStatus(howMany) {
                                                            csStatus.textContent = howMany + " options available."
                                                        }

                                                        function makeChoice(whichOption) {
                                                            const optionTitle = whichOption.querySelector('strong')
                                                            csInput.value = optionTitle.textContent
                                                            moveFocus(document.activeElement, 'input')
                                                            // update aria-selected, if using
                                                        }

                                                        function setState(newState) {
                                                            switch (newState) {
                                                                case 'initial':
                                                                    csState = 'initial'
                                                                    break
                                                                case 'opened':
                                                                    csState = 'opened'
                                                                    break
                                                                case 'filtered':
                                                                    csState = 'filtered'
                                                                    break
                                                                case 'closed':
                                                                    csState = 'closed'
                                                            }
                                                            // console.log({csState})
                                                        }

                                                        function doKeyAction(whichKey) {
                                                            const currentFocus = findFocus()
                                                            switch (whichKey) {
                                                                case 'Enter':
                                                                    if (csState === 'initial') {
                                                                        // if state = initial, toggleOpen and set state to opened
                                                                        toggleList('Open')
                                                                        setState('opened')
                                                                    } else if (csState === 'opened' && currentFocus.tagName === 'LI') {
                                                                        // if state = opened and focus on list, makeChoice and set state to closed
                                                                        makeChoice(currentFocus)
                                                                        toggleList('Shut')
                                                                        setState('closed')
                                                                    } else if (csState === 'opened' && currentFocus === csInput) {
                                                                        // if state = opened and focus on input, close it
                                                                        toggleList('Shut')
                                                                        setState('closed')
                                                                    } else if (csState === 'filtered' && currentFocus.tagName === 'LI') {
                                                                        // if state = filtered and focus on list, makeChoice and set state to closed
                                                                        makeChoice(currentFocus)
                                                                        toggleList('Shut')
                                                                        setState('closed')
                                                                    } else if (csState === 'filtered' && currentFocus === csInput) {
                                                                        // if state = filtered and focus on input, set state to opened
                                                                        toggleList('Open')
                                                                        setState('opened')
                                                                    } else { // i.e. csState is closed, or csState is opened/filtered but other focus point?
                                                                        // if state = closed, set state to filtered? i.e. open but keep existing input? 
                                                                        toggleList('Open')
                                                                        setState('filtered')
                                                                    }
                                                                    break

                                                                case 'Escape':
                                                                    // if state = initial, do nothing
                                                                    // if state = opened or filtered, set state to initial
                                                                    // if state = closed, do nothing
                                                                    if (csState === 'opened' || csState === 'filtered') {
                                                                        toggleList('Shut')
                                                                        setState('initial')
                                                                    }
                                                                    break

                                                                case 'ArrowDown':
                                                                    if (csState === 'initial' || csState === 'closed') {
                                                                        // if state = initial or closed, set state to opened and moveFocus to first
                                                                        toggleList('Open')
                                                                        moveFocus(csInput, 'forward')
                                                                        setState('opened')
                                                                    } else {
                                                                        // if state = opened and focus on input, moveFocus to first
                                                                        // if state = opened and focus on list, moveFocus to next/first
                                                                        // if state = filtered and focus on input, moveFocus to first
                                                                        // if state = filtered and focus on list, moveFocus to next/first
                                                                        toggleList('Open')
                                                                        moveFocus(currentFocus, 'forward')
                                                                    }
                                                                    break
                                                                case 'ArrowUp':
                                                                    if (csState === 'initial' || csState === 'closed') {
                                                                        // if state = initial, set state to opened and moveFocus to last
                                                                        // if state = closed, set state to opened and moveFocus to last
                                                                        toggleList('Open')
                                                                        moveFocus(csInput, 'back')
                                                                        setState('opened')
                                                                    } else {
                                                                        // if state = opened and focus on input, moveFocus to last
                                                                        // if state = opened and focus on list, moveFocus to prev/last
                                                                        // if state = filtered and focus on input, moveFocus to last
                                                                        // if state = filtered and focus on list, moveFocus to prev/last
                                                                        moveFocus(currentFocus, 'back')
                                                                    }
                                                                    break
                                                                default:
                                                                    if (csState === 'initial') {
                                                                        // if state = initial, toggle open, doFilter and set state to filtered
                                                                        toggleList('Open')
                                                                        doFilter()
                                                                        setState('filtered')
                                                                    } else if (csState === 'opened') {
                                                                        // if state = opened, doFilter and set state to filtered
                                                                        doFilter()
                                                                        setState('filtered')
                                                                    } else if (csState === 'closed') {
                                                                        // if state = closed, doFilter and set state to filtered
                                                                        doFilter()
                                                                        setState('filtered')
                                                                    } else { // already filtered
                                                                        doFilter()
                                                                    }
                                                                    break
                                                            }
                                                        }
                                                    </script>
                                                    <!-- end -->


                                                    <div class="col-12 col-md-12 col-lg-12 col-xl-12 mb-2 wrapper1">
                                                        <div class="form-group" style="background-color: white; border-radius: 5px; padding:10px">
                                                            <label>Sub Category</label>
                                                            <input type="text" class="form-control" value="" name="sub_category" onkeypress="return event.keyCode != 13;">
                                                        </div>
                                                    </div>

                                                    <div class="col-12 col-md-12 col-lg-12 col-xl-12 mb-2 wrapper1">
                                                        <div class="form-group" style="background-color: white; border-radius: 5px; padding:10px">
                                                            <label>Category</label>
                                                            <input type="text" class="form-control" value="" name="category" onkeypress="return event.keyCode != 13;">
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                            <style>
                                                .modal-footer {
                                                    justify-content: flex-start;
                                                }
                                            </style>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                                <button type="submit" class="btn btn-primary">Save</button>
                                            </div>
                                        </form>

                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <!-- <div class="col-12 col-md-12 col-lg-12 col-xl-12">
                                <form action="" method="post" class="mb-5">

                                    <div class="row">
                                        <div class="col-12 col-md-6 col-lg-6 col-xl-6 mb-3">
                                            <label for="category" class="form-label">Category</label>
                                            <input class="form-control" id="date" type="text" name="category">
                                        </div>


                                        <div class="col-12 col-md-6 col-lg-6 col-xl-6 mb-3">
                                            <label for="category" class="form-label"> Category</label>
                                            <select class="form-control" data-toggle="select2" data-width="100%" name="category" style="background: #FCFCFC!important;">
                                                <optgroup label="">
                                                    <option value="">United State</option>
                                                    <option value="">Canada</option>
                                                    <option value="">Maxico</option>
                                                    <option value="">France</option>
                                                    <option value="">Germany</option>
                                                </optgroup>
                                            </select>
                                        </div>

                                        <div class="col-12 col-md-6 col-lg-6 col-xl-6 mb-3">
                                            <label for="sub_category" class="form-label">Sub Category</label>
                                            <select class="form-control" data-toggle="select2" data-width="100%" name="sub_category" style="background: #FCFCFC!important;">
                                                <optgroup label="">
                                                    <option value="">United State</option>
                                                    <option value="">Canada</option>
                                                    <option value="">Maxico</option>
                                                    <option value="">France</option>
                                                    <option value="">Germany</option>
                                                </optgroup>
                                            </select>
                                        </div>
                                        <style>
                                            .select2-container--default .select2-selection--single {
                                                background: #FCFCFC !important;
                                                color: #444 !important;
                                            }

                                            .form-control {
                                                /* background: #FCFCFC !important; */
                                                color: #444 !important;
                                            }
                                        </style>
                                        <div class="col-12 col-md-12 col-lg-12 col-xl-12">
                                            <button type="submit" class="btn btn-primary float-end">Create Category</button>
                                        </div>
                                    </div>
                                </form>
                            </div> -->

                                <div class="col-12 col-md-12 col-lg-12 col-xl-12">

                                    <style>
                                        #product_category_wrapper {
                                            background-color: white;
                                            padding: 20px;
                                            border-radius: 5px;
                                        }

                                        .dataTables_scrollHeadInner thead tr th {
                                            text-align: center;
                                        }

                                        #product_category tr td {
                                            text-align: center;
                                        }
                                    </style>

                                    <table id="product_category" class="display nowrap h-100" style="width:100%">

                                        <thead>
                                            <tr>
                                                <th><input type="checkbox" id="select-all-checkbox" onclick="selectAll()"></th>
                                                <!-- <th>Id</th> -->
                                                <th>Category Image</th>
                                                <th>Parent Category</th>
                                                <th>Sub Category</th>
                                                <th>Category</th>
                                                <th>UPC Code</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>

                                        <tbody>

                                            <%record.forEach(records=>{%>
                                                <tr>
                                                    <td><input type="checkbox" class="row-checkbox"></td>
                                                    <!-- <td>
                                                        <%=records.id%>
                                                    </td> -->
                                                    <td>

                                                        <%if(records.category_image){%>
                                                            <div class="" style="background: url('<%=records.category_image%>');background-size:cover;background-repeat: no-repeat;background-position:center center; height: 150px;width:150px;">
                                                            </div>
                                                            <%}else{%>
                                                                <div>Null</div>
                                                                <%}%>

                                                    </td>

                                                    <td>
                                                        <%=records.parent_category?records.parent_category: 'Null' %>
                                                    </td>

                                                    <td>
                                                        <%=records.sub_category?records.sub_category: 'Null' %>
                                                    </td>
                                                    <td>
                                                        <%=records.category?records.category: 'Null' %>

                                                    </td>

                                                    <td>
                                                        <%=records.upc_code%>
                                                    </td>
                                                    <td>
                                                        <div class="btn-group mb-2">
                                                            <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                                Add <i class="mdi mdi-chevron-down"></i>
                                                            </button>
                                                            <div class="dropdown-menu">

                                                                <a class="dropdown-item" href="/product/add_product/<%=records.id%>">

                                                                    <svg xmlns="http://www.w3.org/2000/svg" height="16" width="16" viewBox="0 0 512 512">
                                                                        <path d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32V224H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H192V432c0 17.7 14.3 32 32 32s32-14.3 32-32V288H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z" />
                                                                    </svg>
                                                                    <span class="ms-1">Add Product</span>
                                                                </a>

                                                            </div>
                                                        </div>
                                                    </td>
                                                </tr>
                                                <%});%>



                                        </tbody>
                                    </table>
                                </div>
                            </div>

                        </div>
                        <!-- container-fluid -->

                    </div> <!-- content -->

                    <!-- Footer Start -->
                    <%- include('../layouts/footer.ejs') -%>

                        <!-- end Footer -->

                </div>
                <!-- End Page content -->


    </div>
    <!-- END wrapper -->

    <!-- Right Sidebar -->
    <%- include('../layouts/right_sidebar') -%>
        <!-- /Right-bar -->

        <!-- Right bar overlay-->
        <div class="rightbar-overlay"></div>

        <!-- Vendor -->
        <script src="/assets/libs/jquery/jquery.min.js"></script>
        <script src="/assets/libs/bootstrap/js/bootstrap.bundle.min.js"></script>
        <script src="/assets/libs/simplebar/simplebar.min.js"></script>
        <script src="/assets/libs/node-waves/waves.min.js"></script>
        <script src="/assets/libs/waypoints/lib/jquery.waypoints.min.js"></script>
        <script src="/assets/libs/jquery.counterup/jquery.counterup.min.js"></script>
        <script src="/assets/libs/feather-icons/feather.min.js"></script>

        <script src="/assets/libs/selectize/js/standalone/selectize.min.js"></script>
        <script src="/assets/libs/mohithg-switchery/switchery.min.js"></script>
        <script src="/assets/libs/multiselect/js/jquery.multi-select.js"></script>
        <script src="/assets/libs/select2/js/select2.min.js"></script>
        <script src="/assets/libs/jquery-mockjax/jquery.mockjax.min.js"></script>
        <script src="/assets/libs/devbridge-autocomplete/jquery.autocomplete.min.js"></script>
        <script src="/assets/libs/bootstrap-touchspin/jquery.bootstrap-touchspin.min.js"></script>
        <script src="https://coderthemes.com/adminto/layouts//assets/libs/bootstrap-maxlength/bootstrap-maxlength.min.js"></script>

        <!-- Init js-->
        <script src="/assets/js/pages/form-advanced.init.js"></script>

        <!-- App js -->
        <script src="/assets/js/app.min.js"></script>


        <!-- data table js -->
        <!-- <script>
        $(document).ready(function () {
            $('#example').DataTable({
                dom: 'Bfrtip',
                buttons: [
                    'copy', 'csv', 'excel', 'pdf', 'print'
                ]
            });
        });

    </script> -->

        <script>
            var table;

            $(document).ready(function () {
                table = $('#product_category').DataTable({
                    dom: 'Bfrtip',
                    buttons: [
                        'copy', 'csv', 'excel', 'pdf', 'print'],
                    scrollX: true,
                    scrollY: true,

                    // select: {
                    //     style: 'multi', // Enable multiple row selection
                    //     selector: 'td input', // Use the first column for selection
                    // },
                });

                // $('#select-all-checkbox').on('click', function () {
                //     var isChecked = $(this).prop('checked');
                //     $('input.row-checkbox', table.rows().nodes()).prop('checked', isChecked);
                //     table.rows().select(isChecked);
                // });
            });
        </script>

        <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
        <script src="https://cdn.datatables.net/buttons/2.4.2/js/dataTables.buttons.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
        <script src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.html5.min.js"></script>
        <script src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.print.min.js"></script>
        <script src="https://cdn.datatables.net/select/1.3.3/js/dataTables.select.min.js"></script>



        <script src="/assets/libs/select2/js/select2.min.js"></script>

        <!-- <script>
        const selectAll = () => {
            let select_all = document.querySelector('#select-all-checkbox');

            let one_checkbox = document.querySelector('.row-checkbox');
            console.log(select_all);
            select_all.addEventListener(() => {
                one_checkbox.setAttribute('selected');
            })


        }
    </script> -->

</body>

</html>